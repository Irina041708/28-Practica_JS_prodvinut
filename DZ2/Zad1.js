// Задание 1
// Представьте, что у вас есть класс для управления библиотекой.
//  В этом классе будет приватное свойство для хранения списка книг,
//   а также методы для добавления книги, удаления книги и получения
//   информации о наличии книги.

// 1.Класс должен содержать приватное свойство #books, которое
//  инициализируется пустым массивом и представляет собой список
//  книг в библиотеке.

// 2.Реализуйте геттер allBooks, который возвращает текущий список книг.

// 3.Реализуйте метод addBook(title), который позволяет добавлять книгу
// в список. Если книга с таким названием уже существует в списке,
//  выбросьте ошибку с соответствующим сообщением.

// 4.Реализуйте метод removeBook(title), который позволит удалять книгу
// из списка по названию. Если книги с таким названием нет в списке,
// выбросьте ошибку с соответствующим сообщением.

// 5.Реализуйте метод hasBook(title), который будет проверять наличие
// книги в библиотеке и возвращать true или false в зависимости от
//  того, есть ли такая книга в списке или нет.

// 6.Реализуйте конструктор, который принимает начальный список книг
// (массив) в качестве аргумента. Убедитесь, что предоставленный
// массив не содержит дубликатов; в противном случае выбрасывайте ошибку.

class Library {
  // 1.Приватное свойство для хранения списка книг в библиотеке
  #books = [];

  // 2.Геттер для получения текущего списка книг
  get allBooks() {
    return this.#books;
  }

  // 3.Метод для добавления книги в список
  // addBook(title) {
  //   if (title === this.#books) {
  //     throw new Error("Книга с таким названием уже существует в списке");
  //   }
  //   this.#books.push(title);
  // }

  // 4. removeBook(title) - Метод удаления книги из списка по названию
  // removeBook(title) {
  //   if (title === this.#books) {
  //     throw new Error("Книги с таким названием нет в списке");
  //   }
  //   this.#books.splice(title);
  // }

  // 5. hasBook(title) - Метод,который будет проверять наличие
  // книги в библиотеке и возвращать true или false в зависимости от
  //  того, есть ли такая книга в списке или нет.
  // hasBook(title) {
  //   if (title === this.#books) {
  //     return true;
  //   }
  //   return false;
  // }

  // 6.constructor(initialBooks) Конструктор,который принимает начальный список книг
  // (массив) в качестве аргумента. Убедитесь, что предоставленный
  // массив не содержит дубликатов; в противном случае выбрасывайте ошибку.
  // constructor(initialBooks) {
  //   if (initialBooks === this.#books) {
  //     throw new Error("Предоставленный массив содержит дубликаты");
  //   }
  //   this.#books = initialBooks;
  // }
}

// Создаем список книг с начальным списком
let book = new Library(["Первая книга","Третья книга"]);
console.log(book.allBooks);

// book.addBook("Вторая книга");
// console.log(book.allBooks);

// book.addBook("Первая книга");
// console.log(book.allBooks);

// book.removeBook("Третья книга");
// console.log(book.allBooks);

// book.hasBook("\nВторая книга");
// console.log(book.allBooks);
